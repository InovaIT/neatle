/*
 * MIT License
 *
 * Copyright (c) 2017 Inova IT
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


apply plugin: 'maven'
apply plugin: 'signing'

def groupId = "si.inova"
def version = ext.getVersionName()

def localReleaseDest = "${buildDir}/release/${version}"

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
    classpath += configurations.javadocDeps
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

signing {
    sign configurations.archives
}

if (project.hasProperty('ossrhUsername')) {
    uploadArchives {
        repositories.mavenDeployer {
            pom.groupId = groupId
            pom.artifactId = project.artifactId
            pom.version = version

            beforeDeployment { deployment -> signing.signPom(deployment) }

            uploadArchives {
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            pom.project {
                name 'NeatLE'
                description ' A Neat BluetoothLE library for Android '

                url 'https://github.com/inovait/neatle'

                licenses {
                    license {
                        name 'MIT'
                        url 'https://github.com/inovait/neatle/blob/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'inova'
                        name = 'Inova IT'
                        email = 'android@inova.si'
                    }
                }

                scm {
                    connection 'scm:git:https://github.com/inovait/neatle.git'
                    url 'https://github.com/inovait/neatle.git'
                }
            }
        }
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "release-${version}.zip"
    println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
}

task generateRelease {
    println "Release ${version} can be found at ${localReleaseDest}/"
}

generateRelease.dependsOn(uploadArchives)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}
